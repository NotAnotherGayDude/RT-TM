name: Nihilus Multi-Platform Clean Build
on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]
  workflow_dispatch:
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            compiler: clang
            cc: clang
            cxx: clang++
            name: "Ubuntu Clang"
          - os: ubuntu-latest
            compiler: gcc
            cc: gcc
            cxx: g++
            name: "Ubuntu GCC"
          - os: macos-latest
            compiler: clang
            cc: clang
            cxx: clang++
            name: "macOS Clang"
          - os: windows-latest
            compiler: msvc
            name: "Windows MSVC"
    runs-on: ${{ matrix.os }}
    name: Build on ${{ matrix.name }}
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Setup Clang (Ubuntu)
      if: matrix.os == 'ubuntu-latest' && matrix.compiler == 'clang'
      run: |
        sudo apt-get update
        sudo apt update
        wget https://apt.llvm.org/llvm.sh
        chmod u+x llvm.sh
        sudo ./llvm.sh 20
    
    - name: Setup GCC (Ubuntu)
      if: matrix.os == 'ubuntu-latest' && matrix.compiler == 'gcc'
      run: |
        sudo apt-get install build-essential
        sudo apt-get install g++-14
    
    - name: Setup Clang (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install llvm
    
    - name: Setup MSVC (Windows)
      if: matrix.os == 'windows-latest'
      uses: ilammy/msvc-dev-cmd@v1
    
    - name: Create Build Directory
      run: mkdir -p Build

    - name: Bless the Code
      run: |
        echo "üïØÔ∏èüß†‚ú® BLESSING THE CODE WITH PRIXONIAN KINEMATICS ‚ú®üß†üïØÔ∏è"
        echo "==============================================="
        cat .github/Prixonian_Kinematics.md || echo "‚ùå Prixonian scroll not found. The build shall proceed... unblessed."
        echo "==============================================="
    
    - name: Configure CMake
      run: |
        cmake -S . -B ./Build -DCMAKE_BUILD_TYPE=Release -DLLAMA_CURL=OFF -DCMAKE_INSTALL_RPATH_USE_LINK_PATH=TRUE -DCMAKE_INSTALL_RPATH="@loader_path/../lib" -DNIHILUS_VS_LLAMA=TRUE -DGGML_METAL=OFF
    
    - name: Build Project
      run: |
        cmake --build ./Build --config=Release
    
    - name: Install Project
      run: |
        cmake --install ./Build --config=Release
    
    - name: Create Models Directory
      run: |
        mkdir -p installed-to
    
    - name: Download Model (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        wget -O installed-to/Meta-Llama-3.1-8B-Instruct-Q8_0.gguf https://huggingface.co/bartowski/Llama-3.2-3B-Instruct-GGUF/resolve/main/Llama-3.2-3B-Instruct-Q8_0.gguf
    
    - name: Download Model (Windows)
      if: runner.os == 'Windows'
      run: |
        Invoke-WebRequest -Uri "https://huggingface.co/bartowski/Llama-3.2-3B-Instruct-GGUF/resolve/main/Llama-3.2-3B-Instruct-Q8_0.gguf" -OutFile "installed-to/Meta-Llama-3.1-8B-Instruct-Q8_0.gguf"
    
    - name: Set Library Path and Run Model (macOS)
      if: runner.os == 'macOS'
      run: |
        export DYLD_LIBRARY_PATH="${GITHUB_WORKSPACE}/../Install/lib:$DYLD_LIBRARY_PATH"
        chmod +x "${GITHUB_WORKSPACE}/../Install/bin/nihilus_performance"
        "${GITHUB_WORKSPACE}/../Install/bin/nihilus_performance" -m installed-to/Meta-Llama-3.1-8B-Instruct-Q8_0.gguf -p "What is the meaning of life?" -s 0 -n 8 -no-cnv -t 1 > llm_output_macos.txt 2>&1
        echo "=== Nihilus LLM OUTPUT (macOS) ==="
        cat llm_output_macos.txt
        echo "=== END OUTPUT ==="
        echo "=== VALIDATION CHECK ==="
        if grep -q "The question that has puzzled philosophers," llm_output_macos.txt; then
          echo "‚úÖ VALIDATION PASSED: Expected text found in output"
        else
          echo "‚ùå VALIDATION FAILED: Expected text 'The question that has puzzled philosophers,' not found in output"
          echo "=== ACTUAL OUTPUT FOR DEBUGGING ==="
          echo "Full output:"
          cat llm_output_macos.txt
          echo "=== FIRST 500 CHARACTERS ==="
          head -c 500 llm_output_macos.txt
          echo ""
          echo "=== OUTPUT LENGTH: $(wc -c < llm_output_macos.txt) characters ==="
          echo "=== LINES CONTAINING 'meaning' ==="
          grep -i "meaning" llm_output_macos.txt || echo "No lines containing 'meaning' found"
          echo "=== LINES CONTAINING 'philosopher' ==="
          grep -i "philosopher" llm_output_macos.txt || echo "No lines containing 'philosopher' found"
          exit 1
        fi
    
    - name: Set Library Path and Run Model (Linux)
      if: runner.os == 'Linux'
      run: |
        export LD_LIBRARY_PATH="${GITHUB_WORKSPACE}/../Install/lib:$LD_LIBRARY_PATH"
        chmod +x "${GITHUB_WORKSPACE}/../Install/bin/nihilus_performance"
        "${GITHUB_WORKSPACE}/../Install/bin/nihilus_performance" -m installed-to/Meta-Llama-3.1-8B-Instruct-Q8_0.gguf -p "What is the meaning of life?" -s 0 -n 8 -no-cnv -t 1 > llm_output_linux.txt 2>&1
        echo "=== Nihilus LLM OUTPUT (Linux) ==="
        cat llm_output_linux.txt
        echo "=== END OUTPUT ==="
        echo "=== VALIDATION CHECK ==="
        if grep -q "The question that has puzzled philosophers," llm_output_linux.txt; then
          echo "‚úÖ VALIDATION PASSED: Expected text found in output"
        else
          echo "‚ùå VALIDATION FAILED: Expected text 'The question that has puzzled philosophers,' not found in output"
          echo "=== ACTUAL OUTPUT FOR DEBUGGING ==="
          echo "Full output:"
          cat llm_output_linux.txt
          echo "=== FIRST 500 CHARACTERS ==="
          head -c 500 llm_output_linux.txt
          echo ""
          echo "=== OUTPUT LENGTH: $(wc -c < llm_output_linux.txt) characters ==="
          echo "=== LINES CONTAINING 'meaning' ==="
          grep -i "meaning" llm_output_linux.txt || echo "No lines containing 'meaning' found"
          echo "=== LINES CONTAINING 'philosopher' ==="
          grep -i "philosopher" llm_output_linux.txt || echo "No lines containing 'philosopher' found"
          exit 1
        fi
    
    - name: Run Model (Windows)
      if: runner.os == 'Windows'
      run: |
        & "${env:GITHUB_WORKSPACE}\..\Install\bin\nihilus_performance.exe" -m installed-to/Meta-Llama-3.1-8B-Instruct-Q8_0.gguf -p "What is the meaning of life?" -s 0 -n 8 -no-cnv -t 1 > llm_output_windows.txt 2>&1
        Write-Host "=== Nihilus LLM OUTPUT (Windows) ==="
        Get-Content llm_output_windows.txt
        Write-Host "=== END OUTPUT ==="
        Write-Host "=== VALIDATION CHECK ==="
        if (Select-String -Pattern "The question that has puzzled philosophers," -Path llm_output_windows.txt -Quiet) {
          Write-Host "‚úÖ VALIDATION PASSED: Expected text found in output"
        } else {
          Write-Host "‚ùå VALIDATION FAILED: Expected text 'The question that has puzzled philosophers,' not found in output"
          Write-Host "=== ACTUAL OUTPUT FOR DEBUGGING ==="
          Write-Host "Full output:"
          Get-Content llm_output_windows.txt
          Write-Host "=== FIRST 500 CHARACTERS ==="
          (Get-Content llm_output_windows.txt -Raw).Substring(0, [Math]::Min(500, (Get-Content llm_output_windows.txt -Raw).Length))
          Write-Host "=== OUTPUT LENGTH: $((Get-Content llm_output_windows.txt -Raw).Length) characters ==="
          Write-Host "=== LINES CONTAINING 'meaning' ==="
          $meaningLines = Select-String -Pattern "meaning" -Path llm_output_windows.txt -AllMatches
          if ($meaningLines) { $meaningLines } else { Write-Host "No lines containing 'meaning' found" }
          Write-Host "=== LINES CONTAINING 'philosopher' ==="
          $philosopherLines = Select-String -Pattern "philosopher" -Path llm_output_windows.txt -AllMatches
          if ($philosopherLines) { $philosopherLines } else { Write-Host "No lines containing 'philosopher' found" }
          exit 1
        }